#-*- encoding=utf8 -*-
"""
Django settings for test_pr project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# django 生成的随机密钥
# 加密函数中必不可少的，密码重置，表单提交，csrf的key，session数据等等都是需要SELECT_KEY的
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'mjez@23i7m5kf69v==h&*qydf^=mt*mq$+z0g94%!z3*wmdt_n'

# 如果项目上线了要关掉debug，打开会报日志信息，关掉了就报404或者500 提示信息.
# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True

# 域名列表信息，指定域名，如果项目部署道阿里云，需要在这里配置域名，二级域名在后面追加
ALLOWED_HOSTS = ['*']

BASE_DIR =os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0,BASE_DIR)
sys.path.insert(1,os.path.join(BASE_DIR,'apps'))
# Application definition

# 为了不和系统应用混用，自己开发的应用放在这里
INSTALLED_APPS = [
    'django.contrib.auth',          # 认证系统
    'django.contrib.contenttypes',  # 用于内容类型的框架。
    'django.contrib.sessions',      # 会话框架，session数据可以在数据库中的django_session表中查看。
    'django.contrib.messages',      # 消息框架。
    'django.contrib.staticfiles',   #  管理静态文件的框架。
    'users',
    'doc',
    'course',
    'news',
    'verifications',
    # 'haystack', #haystack支持多种搜索引擎，不仅仅是whoosh，使用solr、elastic search等搜索，也可通过haystack，而且直接切换引擎即可，甚至无需修改搜索代码。

]

# django 中间件
# django处理一个Request的过程是首先通过django 中间件，然后再通过默认的URL方式进行的。
# 所以说我们要做的就是在django 中间件这个地方把所有Request拦截住，
# 用我们自己的方式完成处理以后直接返回Response,那么我们可以简化原来的设计思路，

#.django的中间件配置，即MIDDLEWARE设置，所谓中间件就是从用户请求到用户请求结束期间所做的操作，
# 即用户的请求会次从上到下依次执行MIDDLEWARE中的配置，然后服务器响应用户的时候会再次从下至上依次
# 执行，和Java的Filter很相像：
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',   # 补/的
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.middleware.MyMiddleware',
]

# 指向的路径
ROOT_URLCONF = 'myblog.urls'
# 自定义用户模型
AUTH_USER_MODEL = 'users.User'
# 模板文件
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins':['django.templatetags.static'],
        },
    },
]

# WSGI是Web 服务器(uWSGI)与 Web 应用程序或应用框架(Django)之间的一种低级别的接口
# WSGI一个接口，框架与应用沟通的桥梁
WSGI_APPLICATION = 'myblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# 数据库
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'mysql',
#         'HOST':'localhost',
#         'PORT':'3306',
#         'USER':'root',
#         'PASSWORD':'666666'
#
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': 'utils/dbs/my.cnf',
        },
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",  # 指定redis缓存后端
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "mysecret"
        }
    },
    # 同样可以指定多个redis
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "sms_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },

}

# 将用户的session保存到redis中
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 指定缓存redis的别名
SESSION_CACHE_ALIAS = "session"
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

#  密码校验
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]


LOGGING = {             # 表示放在logging的参数里面已字典的形式存在
    'version': 1,       # 版本号固定, 表示django在解读配置信息时里面的键值对参数名有特定的含义,默认自己实现,版本号为1.
    'disable_existing_loggers': False,      # 表示是不是要禁止已经存在的日志器, 在其他地方也有配置日志器.
    'formatters': {             # 表示日志输出的格式
        'verbose': {            # 表示复杂点的格式
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {             # 表示简单格式
            #  表示他的等级在模块的第几行出现的信息
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {            # 过滤器, 表示是否屏蔽在其他地方输出的日志信息. django默认不做任何屏蔽
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {       # 代表处理器
        'console': {        # 终端
            'level': 'DEBUG',       # debug级别以上的都可以写
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {           # 文件
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # BASE_DIR 指的是里面内嵌的test_pr 目录
            'filename': os.path.join(BASE_DIR, "logs/myblog.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,          # 每个文件的最大值,满了自动产生新文件
            'backupCount': 10,                      # 保留多少个文件
            'formatter': 'verbose'
        },
    },
    'loggers': {        # 创建logger日志器的对象,是通过配置方式创建,不是真定义
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],        # 可以往终端和文件里面写
            'propagate': True,      # 表示django日志器执行完后还可以再传递,别的日志器也可以再使用
        },
    }
}

# # Haystack
# HAYSTACK_CONNECTIONS = {
#     'default': {
#         'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
#         'URL': 'http://192.168.216.137:9200/',  # 此处为elasticsearch运行的服务器ip地址，端口号默认为9200
#         'INDEX_NAME': 'mysite',  # 指定elasticsearch建立的索引库的名称 数据库名
#     },
# }
#
# # 设置每页显示的数据量
# HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5
# # 当数据库改变时，会自动更新索引
# HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')